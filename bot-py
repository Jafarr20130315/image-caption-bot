from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from PIL import Image
import torch
from transformers import BlipProcessor, BlipForConditionalGeneration
from deep_translator import GoogleTranslator

processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

async def image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    file_path = await file.download_to_drive()

    raw_image = Image.open(file_path).convert('RGB')
    inputs = processor(raw_image, return_tensors="pt")
    out = model.generate(**inputs)
    caption = processor.decode(out[0], skip_special_tokens=True)

    translated = GoogleTranslator(source='en', target='ru').translate(caption)
    await update.message.reply_text(translated)

app = ApplicationBuilder().token("8197573430:AAGpmbil9vUobo4q4O-JsLe79m-VB44nRHU").build()
app.add_handler(MessageHandler(filters.PHOTO, image_handler))
app.run_polling()
